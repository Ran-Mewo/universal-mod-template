// This file solely exists because unimined's manifold plugin can't make root preprocessors
// Basically a single build.properties file that applies to everything

plugins {
    id 'manifold'
}

def loadVersionProperties() {
    // Get all the files in "versionProperties", as we're getting the file names, we should remove the ".properties" at the end to get the versions
    // Sort it so it always goes from oldest to newest
    def mcVers = rootProject.fileTree("versionProperties").files.collect { it.name.replaceAll("\\.properties", "") }.sort()
    def mcVersion = rootProject.hasProperty("mc_ver") ? rootProject.mc_ver : ""
    def mcIndex = mcVers.indexOf(mcVersion)

    assert mcIndex != -1 : "MC version $mcVersion not found in $mcVers. Is the 'mc_ver' property correctly set?"

//    println "Loading properties file at ${mcVersion}.properties"
    def props = new Properties()
    props.load(new FileInputStream("$rootDir/versionProperties/${mcVersion}.properties"))

    props.each { key, value -> gradle.ext.set(key, value) }
    gradle.ext.mcVers = mcVers
    gradle.ext.mcIndex = mcIndex
}

def writePreprocessorDefinitions(List<String> mcVers, int mcIndex) {
    StringBuilder sb = new StringBuilder();
    sb.append("# Preprocessor definitions generated by build script\n");

    // Add a number to each version, example: MC_1_19_4 = 0, MC_1_20_1 = 1, etc
    gradle.ext.mcVers.eachWithIndex { ver, idx ->
        sb.append("MC_${ver.replace('.', '_')}=${idx}\n")
        if (gradle.ext.mcIndex == idx) sb.append("MC_VER=${idx}\n") // Set the current version, example: if the current version is 1.20.1, then MC_VER = 1 (because MC_1_20_1 = 1)
    }

    new File(projectDir, "build.properties").text = sb.toString()
}

loadVersionProperties()
writePreprocessorDefinitions(gradle.ext.mcVers, gradle.ext.mcIndex)